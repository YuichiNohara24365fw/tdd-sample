name: Claude Code Actions Advanced

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]

jobs:
  claude-code-actions:
    name: "ü§ñ Claude Code Actions"
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '[CLAUDE]') || contains(github.event.issue.labels.*.name, 'claude-actions') || contains(github.event.comment.body, '@claude')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Parse Claude instructions
      id: parse
      run: |
        echo "Parsing Claude instructions..."
        
        # Get issue body or comment body
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          INSTRUCTION_TEXT="${{ github.event.comment.body }}"
        else
          INSTRUCTION_TEXT="${{ github.event.issue.body }}"
        fi
        
        echo "Raw instruction: $INSTRUCTION_TEXT"
        
        # Determine action type based on keywords
        if echo "$INSTRUCTION_TEXT" | grep -qi "Êñ∞„Åó„ÅÑ„ÇØ„É©„Çπ\|new class\|„ÇØ„É©„Çπ„Çí‰ΩúÊàê\|create class"; then
          echo "action_type=create_class" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "Êñ∞„Åó„ÅÑ„É°„ÇΩ„ÉÉ„Éâ\|new method\|„É°„ÇΩ„ÉÉ„Éâ„ÇíËøΩÂä†\|add method"; then
          echo "action_type=add_method" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "„ÉÜ„Çπ„Éà„ÇíËøΩÂä†\|add test\|„ÉÜ„Çπ„Éà‰ΩúÊàê\|create test"; then
          echo "action_type=add_test" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "„É™„Éï„Ç°„ÇØ„Çø\|refactor\|ÊîπÂñÑ\|improve"; then
          echo "action_type=refactor" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "„É¨„Éì„É•„Éº\|review\|„ÉÅ„Çß„ÉÉ„ÇØ\|check\|ÂàÜÊûê\|analyze"; then
          echo "action_type=code_review" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "„Éê„Ç∞‰øÆÊ≠£\|bug fix\|fix bug\|‰øÆÊ≠£"; then
          echo "action_type=bug_fix" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "TDD\|red.*green.*refactor"; then
          echo "action_type=tdd_cycle" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "ÂÖ®„ÉÜ„Çπ„Éà\|all test\|test.*all"; then
          echo "action_type=run_all_tests" >> $GITHUB_OUTPUT
        elif echo "$INSTRUCTION_TEXT" | grep -qi "„Ç´„Éê„É¨„ÉÉ„Ç∏\|coverage"; then
          echo "action_type=check_coverage" >> $GITHUB_OUTPUT
        else
          echo "action_type=general" >> $GITHUB_OUTPUT
        fi
        
        # Extract class name if mentioned
        CLASS_NAME=$(echo "$INSTRUCTION_TEXT" | grep -oiE "(Calculator|StringUtils|ArrayUtils|[A-Z][a-zA-Z]*Utils?)" | head -1)
        echo "target_class=${CLASS_NAME:-Unknown}" >> $GITHUB_OUTPUT
        
        # Extract method name if mentioned
        METHOD_NAME=$(echo "$INSTRUCTION_TEXT" | grep -oiE "(sqrt|factorial|power|unique|sum|average|[a-z][a-zA-Z]*)" | head -1)
        echo "target_method=${METHOD_NAME:-unknown}" >> $GITHUB_OUTPUT

    - name: Execute Claude action
      id: execute
      run: |
        ACTION_TYPE="${{ steps.parse.outputs.action_type }}"
        TARGET_CLASS="${{ steps.parse.outputs.target_class }}"
        TARGET_METHOD="${{ steps.parse.outputs.target_method }}"
        
        echo "Executing action: $ACTION_TYPE"
        echo "Target class: $TARGET_CLASS"
        echo "Target method: $TARGET_METHOD"
        
        case $ACTION_TYPE in
          "create_class")
            echo "üèóÔ∏è Creating new class: $TARGET_CLASS"
            if [ "$TARGET_CLASS" = "ArrayUtils" ]; then
              cat > "src/${TARGET_CLASS,,}.js" << 'EOF'
export class ArrayUtils {
  static unique(array) {
    return [...new Set(array)];
  }
  
  static sum(array) {
    return array.reduce((acc, val) => acc + val, 0);
  }
  
  static average(array) {
    if (array.length === 0) throw new Error('Array cannot be empty');
    return this.sum(array) / array.length;
  }
  
  static max(array) {
    if (array.length === 0) throw new Error('Array cannot be empty');
    return Math.max(...array);
  }
  
  static min(array) {
    if (array.length === 0) throw new Error('Array cannot be empty');
    return Math.min(...array);
  }
}
EOF
              echo "‚úÖ Created ArrayUtils class"
            else
              echo "‚ö†Ô∏è Unknown class: $TARGET_CLASS"
            fi
            ;;
            
          "add_method")
            echo "üîß Adding method: $TARGET_METHOD to $TARGET_CLASS"
            if [ "$TARGET_CLASS" = "Calculator" ] && [ "$TARGET_METHOD" = "sqrt" ]; then
              # Add sqrt method to Calculator
              sed -i '/power(base, exponent) {/a\\n  sqrt(n) {\n    if (n < 0) {\n      throw new Error('\''Square root of negative number is not allowed'\'');\n    }\n    return Math.sqrt(n);\n  }' src/calculator.js || echo "Method may already exist"
              echo "‚úÖ Added sqrt method to Calculator"
            elif [ "$TARGET_CLASS" = "Calculator" ] && [ "$TARGET_METHOD" = "factorial" ]; then
              sed -i '/power(base, exponent) {/a\\n  factorial(n) {\n    if (n < 0) {\n      throw new Error('\''Factorial of negative number is not allowed'\'');\n    }\n    if (n === 0 || n === 1) return 1;\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }' src/calculator.js || echo "Method may already exist"
              echo "‚úÖ Added factorial method to Calculator"
            else
              echo "‚ö†Ô∏è Unknown method/class combination"
            fi
            ;;
            
          "add_test")
            echo "üß™ Adding tests for: $TARGET_CLASS.$TARGET_METHOD"
            if [ "$TARGET_CLASS" = "Calculator" ] && [ "$TARGET_METHOD" = "sqrt" ]; then
              cat >> "tests/calculator.test.js" << 'EOF'

  describe('sqrt', () => {
    test('should calculate square root of positive numbers', () => {
      expect(calculator.sqrt(4)).toBe(2);
      expect(calculator.sqrt(9)).toBe(3);
      expect(calculator.sqrt(16)).toBe(4);
    });

    test('should handle square root of zero', () => {
      expect(calculator.sqrt(0)).toBe(0);
    });

    test('should throw error for negative numbers', () => {
      expect(() => calculator.sqrt(-4)).toThrow('Square root of negative number is not allowed');
    });
  });
EOF
              echo "‚úÖ Added sqrt tests to Calculator"
            else
              echo "‚ö†Ô∏è Test template not available for $TARGET_CLASS.$TARGET_METHOD"
            fi
            ;;
            
          "run_all_tests")
            echo "üß™ Running all tests..."
            npm test > test_results.txt 2>&1
            ;;
            
          "check_coverage")
            echo "üìä Checking test coverage..."
            npm run test:coverage > coverage_results.txt 2>&1
            ;;
            
          "tdd_cycle")
            echo "üîÑ Running TDD cycle..."
            npm run tdd:cycle > tdd_results.txt 2>&1 || true
            ;;
            
          "refactor")
            echo "üîß Running refactor checks..."
            npm run lint > lint_results.txt 2>&1 || true
            npm test > refactor_test_results.txt 2>&1
            ;;
            
          "code_review")
            echo "üëÅÔ∏è Running code review analysis..."
            echo "Triggering comprehensive code review..." > review_trigger.txt
            npm run lint > review_lint.txt 2>&1 || true
            npm run test:coverage > review_coverage.txt 2>&1 || true
            echo "Code review analysis completed" >> review_trigger.txt
            ;;
            
          *)
            echo "ü§ñ Running general tests..."
            npm test > general_results.txt 2>&1
            ;;
        esac
        
        echo "action_completed=$ACTION_TYPE" >> $GITHUB_OUTPUT

    - name: Commit changes if any
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git add -A
          git commit -m "ü§ñ Claude Code Actions: ${{ steps.parse.outputs.action_type }}

Auto-generated changes for Issue #${{ github.event.issue.number }}
Target: ${{ steps.parse.outputs.target_class }}.${{ steps.parse.outputs.target_method }}

ü§ñ Generated with Claude Code Actions Integration" || echo "Commit failed or no changes"
          git push || echo "Push failed"
        fi

    - name: Post comprehensive results
      uses: actions/github-script@v7
      env:
        ACTION_TYPE: ${{ steps.parse.outputs.action_type }}
        TARGET_CLASS: ${{ steps.parse.outputs.target_class }}
        TARGET_METHOD: ${{ steps.parse.outputs.target_method }}
      with:
        script: |
          const actionType = process.env.ACTION_TYPE;
          const targetClass = process.env.TARGET_CLASS;
          const targetMethod = process.env.TARGET_METHOD;
          const issueNumber = context.issue.number;
          const currentTime = new Date().toISOString();
          
          // Read result files
          const fs = require('fs');
          let results = '';
          let status = '‚úÖ ÊàêÂäü';
          
          try {
            if (fs.existsSync('test_results.txt')) {
              results = fs.readFileSync('test_results.txt', 'utf8');
            } else if (fs.existsSync('coverage_results.txt')) {
              results = fs.readFileSync('coverage_results.txt', 'utf8');
            } else if (fs.existsSync('tdd_results.txt')) {
              results = fs.readFileSync('tdd_results.txt', 'utf8');
            } else {
              results = 'Code changes completed successfully';
            }
            
            if (results.includes('FAIL') || results.includes('error')) {
              status = '‚ùå „Ç®„É©„Éº„ÅÇ„Çä';
            }
          } catch (e) {
            results = 'Results file not found - action may have completed successfully';
          }
          
          const actionDescriptions = {
            'create_class': 'üèóÔ∏è Êñ∞„Åó„ÅÑ„ÇØ„É©„Çπ‰ΩúÊàê',
            'add_method': 'üîß „É°„ÇΩ„ÉÉ„ÉâËøΩÂä†',
            'add_test': 'üß™ „ÉÜ„Çπ„ÉàËøΩÂä†',
            'refactor': 'üîß „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞',
            'bug_fix': 'üêõ „Éê„Ç∞‰øÆÊ≠£',
            'tdd_cycle': 'üîÑ TDD„Çµ„Ç§„ÇØ„É´ÂÆüË°å',
            'run_all_tests': 'üß™ ÂÖ®„ÉÜ„Çπ„ÉàÂÆüË°å',
            'check_coverage': 'üìä „Ç´„Éê„É¨„ÉÉ„Ç∏Á¢∫Ë™ç',
            'general': 'ü§ñ ‰∏ÄËà¨ÁöÑ„Å™Âá¶ÁêÜ'
          };
          
          const comment = [
            '## ü§ñ Claude Code Actions - ÂÆüË°åÁµêÊûú',
            '',
            `**Issue**: #${issueNumber}`,
            `**„Ç¢„ÇØ„Ç∑„Éß„É≥**: ${actionDescriptions[actionType] || actionType}`,
            `**ÂØæË±°**: ${targetClass}.${targetMethod}`,
            `**ÂÆüË°åÊôÇÂàª**: ${currentTime}`,
            '',
            '### üìã ÂÆüË°åÁµêÊûú',
            '```',
            results,
            '```',
            '',
            '### üéØ „Çπ„ÉÜ„Éº„Çø„Çπ',
            status,
            '',
            '### üí° Ê¨°„Å´ÂÆüË°åÂèØËÉΩ„Å™ÊåáÁ§∫‰æã',
            '- `Êñ∞„Åó„ÅÑ„ÇØ„É©„Çπ "ArrayUtils" „Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `Calculator„ÇØ„É©„Çπ„Å´ "sqrt" „É°„ÇΩ„ÉÉ„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `sqrt „É°„ÇΩ„ÉÉ„Éâ„ÅÆ„ÉÜ„Çπ„Éà„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `ÂÖ®„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `„Ç´„Éê„É¨„ÉÉ„Ç∏„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `TDD„Çµ„Ç§„ÇØ„É´„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '',
            '---',
            '*ü§ñ Claude Code Actions „Å´„Çà„ÇäËá™ÂãïÂÆüË°å„Åï„Çå„Åæ„Åó„Åü*'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Add action label
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['claude-actions-executed', '${{ steps.parse.outputs.action_type }}']
          });