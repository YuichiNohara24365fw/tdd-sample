name: Claude Refactoring

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]

jobs:
  claude-refactoring:
    name: "üîß Claude Refactoring"
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.title, '[REFACTOR]') || 
      contains(github.event.issue.labels.*.name, 'refactoring') ||
      contains(github.event.comment.body, '@claude-refactor') ||
      (contains(github.event.issue.body, '„É™„Éï„Ç°„ÇØ„Çø') || contains(github.event.issue.body, 'refactor'))
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Backup original code
      run: |
        echo "üìÅ Creating backup of original code..."
        mkdir -p backups
        cp -r src/ backups/src_backup_$(date +%Y%m%d_%H%M%S)/
        echo "Backup created in backups/ directory"

    - name: Analyze refactoring requirements
      id: analyze
      run: |
        echo "üîç Analyzing refactoring requirements..."
        
        # Get refactoring instructions
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          REFACTOR_TEXT="${{ github.event.comment.body }}"
        else
          REFACTOR_TEXT="${{ github.event.issue.body }}"
        fi
        
        echo "Refactor instruction: $REFACTOR_TEXT"
        
        # Determine refactoring type
        if echo "$REFACTOR_TEXT" | grep -qi "ÈáçË§á.*ÂâäÈô§\|duplicate.*remove\|DRY"; then
          echo "refactor_type=remove_duplication" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "Èñ¢Êï∞.*ÂàÜÂâ≤\|function.*split\|extract.*method"; then
          echo "refactor_type=extract_method" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "Â§âÊï∞Âêç.*Â§âÊõ¥\|rename.*variable\|ÂëΩÂêç"; then
          echo "refactor_type=rename_variables" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "„Ç≥„É°„É≥„Éà.*ËøΩÂä†\|add.*comment\|documentation"; then
          echo "refactor_type=add_documentation" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "Âûã.*ÂÆâÂÖ®\|type.*safety\|typescript"; then
          echo "refactor_type=improve_typing" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "„Ç®„É©„Éº.*Âá¶ÁêÜ\|error.*handling"; then
          echo "refactor_type=improve_error_handling" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ\|performance\|ÊúÄÈÅ©Âåñ\|optimize"; then
          echo "refactor_type=optimize_performance" >> $GITHUB_OUTPUT
        elif echo "$REFACTOR_TEXT" | grep -qi "ÂèØË™≠ÊÄß\|readability\|clean.*code"; then
          echo "refactor_type=improve_readability" >> $GITHUB_OUTPUT
        else
          echo "refactor_type=general_cleanup" >> $GITHUB_OUTPUT
        fi
        
        # Extract target files
        TARGET_FILES=$(echo "$REFACTOR_TEXT" | grep -oE "(src/[a-zA-Z0-9_.-]+\.(js|ts|jsx|tsx))" | head -3)
        if [ -z "$TARGET_FILES" ]; then
          TARGET_FILES="src/calculator.js src/stringUtils.js"
        fi
        echo "target_files=$TARGET_FILES" >> $GITHUB_OUTPUT

    - name: Run pre-refactoring tests
      id: pre_tests
      run: |
        echo "üß™ Running pre-refactoring tests..."
        npm test > pre_refactor_tests.txt 2>&1
        if [ $? -eq 0 ]; then
          echo "pre_tests_status=passed" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed before refactoring"
        else
          echo "pre_tests_status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Some tests failed before refactoring"
        fi

    - name: Execute refactoring
      id: refactor
      run: |
        REFACTOR_TYPE="${{ steps.analyze.outputs.refactor_type }}"
        TARGET_FILES="${{ steps.analyze.outputs.target_files }}"
        
        echo "üîß Executing refactoring: $REFACTOR_TYPE"
        echo "Target files: $TARGET_FILES"
        
        case $REFACTOR_TYPE in
          "remove_duplication")
            echo "üîÑ Removing code duplication..."
            
            # Example: Extract common validation logic
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for duplication removal..."
                
                # Add common validation utility if not exists
                if ! grep -q "validateInput" "$file"; then
                  # Add validation helper at the end of class
                  sed -i '/^}$/i\
\
  static validateInput(value, type = "number") {\
    if (value === null || value === undefined) {\
      throw new Error(`Input cannot be null or undefined`);\
    }\
    if (type === "number" && (typeof value !== "number" || isNaN(value))) {\
      throw new Error(`Expected a valid number, got ${typeof value}`);\
    }\
    return true;\
  }' "$file" 2>/dev/null || echo "Validation method may already exist"
                fi
                
                echo "‚úÖ Processed $file for duplication removal"
              fi
            done
            ;;
            
          "extract_method")
            echo "üì¶ Extracting methods for better modularity..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for method extraction..."
                
                # Example: Extract complex calculations
                if grep -q "Math.pow\|Math.sqrt" "$file"; then
                  # Add utility methods
                  sed -i '/^}$/i\
\
  static isValidNumber(n) {\
    return typeof n === "number" && !isNaN(n) && isFinite(n);\
  }\
\
  static formatResult(result, precision = 10) {\
    return Math.round(result * Math.pow(10, precision)) / Math.pow(10, precision);\
  }' "$file" 2>/dev/null || echo "Utility methods may already exist"
                fi
                
                echo "‚úÖ Extracted utility methods in $file"
              fi
            done
            ;;
            
          "rename_variables")
            echo "üìù Improving variable naming..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for variable renaming..."
                
                # Improve variable names (basic examples)
                sed -i 's/\<n\>/number/g; s/\<str\>/text/g; s/\<arr\>/array/g' "$file" 2>/dev/null || echo "Variables may already have good names"
                
                echo "‚úÖ Improved variable names in $file"
              fi
            done
            ;;
            
          "add_documentation")
            echo "üìö Adding comprehensive documentation..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for documentation..."
                
                # Add JSDoc comments to class
                if grep -q "export class" "$file" && ! grep -q "/\*\*" "$file"; then
                  CLASS_NAME=$(grep -o "export class [A-Za-z]*" "$file" | cut -d' ' -f3)
                  sed -i "/export class $CLASS_NAME/i\\
/**\\
 * $CLASS_NAME - Utility class for mathematical operations\\
 * Provides safe and reliable mathematical functions with proper error handling\\
 */\\
" "$file" 2>/dev/null
                fi
                
                # Add method documentation
                sed -i '/add(a, b)/i\
  /**\
   * Adds two numbers together\
   * @param {number} a - First number\
   * @param {number} b - Second number\
   * @returns {number} Sum of a and b\
   */\
' "$file" 2>/dev/null || echo "Documentation may already exist"
                
                echo "‚úÖ Added documentation to $file"
              fi
            done
            ;;
            
          "improve_error_handling")
            echo "üõ°Ô∏è Improving error handling..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for error handling..."
                
                # Add input validation to methods
                if grep -q "divide.*{" "$file"; then
                  sed -i '/divide.*{/a\
    if (typeof a !== "number" || typeof b !== "number") {\
      throw new TypeError("Both arguments must be numbers");\
    }\
    if (!isFinite(a) || !isFinite(b)) {\
      throw new RangeError("Arguments must be finite numbers");\
    }' "$file" 2>/dev/null || echo "Error handling may already exist"
                fi
                
                echo "‚úÖ Improved error handling in $file"
              fi
            done
            ;;
            
          "optimize_performance")
            echo "‚ö° Optimizing performance..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for performance optimization..."
                
                # Add memoization for expensive operations
                sed -i '/^export class/a\
  constructor() {\
    this._cache = new Map();\
  }\
\
  _getCacheKey(...args) {\
    return JSON.stringify(args);\
  }' "$file" 2>/dev/null || echo "Performance optimizations may already exist"
                
                echo "‚úÖ Added performance optimizations to $file"
              fi
            done
            ;;
            
          "improve_readability")
            echo "üìñ Improving code readability..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for readability improvements..."
                
                # Add constants for magic numbers
                sed -i '/^export class/a\
  static get PRECISION() { return 10; }\
  static get MAX_SAFE_INPUT() { return Number.MAX_SAFE_INTEGER; }\
  static get MIN_SAFE_INPUT() { return Number.MIN_SAFE_INTEGER; }' "$file" 2>/dev/null || echo "Constants may already exist"
                
                echo "‚úÖ Improved readability of $file"
              fi
            done
            ;;
            
          *)
            echo "üßπ General code cleanup..."
            
            for file in $TARGET_FILES; do
              if [ -f "$file" ]; then
                echo "Processing $file for general cleanup..."
                
                # Remove console.log statements
                sed -i '/console\.log/d' "$file" 2>/dev/null
                
                # Add consistent spacing
                sed -i 's/){/) {/g; s/}else/} else/g' "$file" 2>/dev/null
                
                echo "‚úÖ General cleanup completed for $file"
              fi
            done
            ;;
        esac
        
        echo "refactor_completed=true" >> $GITHUB_OUTPUT

    - name: Run post-refactoring tests
      id: post_tests
      run: |
        echo "üß™ Running post-refactoring tests..."
        npm test > post_refactor_tests.txt 2>&1
        if [ $? -eq 0 ]; then
          echo "post_tests_status=passed" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed after refactoring"
        else
          echo "post_tests_status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Some tests failed after refactoring"
        fi

    - name: Run quality checks
      id: quality
      run: |
        echo "üìä Running quality checks..."
        
        # ESLint check
        npm run lint > refactor_lint.txt 2>&1 || echo "Lint completed with issues"
        
        # Coverage check
        npm run test:coverage > refactor_coverage.txt 2>&1 || echo "Coverage analysis completed"
        
        # Complexity analysis (basic)
        echo "=== Code Complexity Analysis ===" > complexity_analysis.txt
        for file in src/*.js; do
          if [ -f "$file" ]; then
            LINES=$(wc -l < "$file")
            FUNCTIONS=$(grep -c "function\|=>" "$file" 2>/dev/null || echo 0)
            echo "$file: $LINES lines, $FUNCTIONS functions" >> complexity_analysis.txt
          fi
        done

    - name: Generate refactoring report
      id: report
      run: |
        echo "üìã Generating refactoring report..."
        
        cat > refactoring_report.txt << EOF
=== CLAUDE REFACTORING REPORT ===
Refactoring Type: ${{ steps.analyze.outputs.refactor_type }}
Target Files: ${{ steps.analyze.outputs.target_files }}
Execution Time: $(date)

=== PRE-REFACTORING STATUS ===
Tests Status: ${{ steps.pre_tests.outputs.pre_tests_status }}

=== REFACTORING CHANGES ===
$(git diff --name-only 2>/dev/null || echo "No changes detected")

=== POST-REFACTORING STATUS ===
Tests Status: ${{ steps.post_tests.outputs.post_tests_status }}

=== QUALITY METRICS ===
EOF
        
        # Add lint results
        echo "ESLint Results:" >> refactoring_report.txt
        head -20 refactor_lint.txt >> refactoring_report.txt 2>/dev/null || echo "No lint issues" >> refactoring_report.txt
        
        # Add coverage info
        echo -e "\nCoverage Results:" >> refactoring_report.txt
        grep -E "All files|%" refactor_coverage.txt 2>/dev/null | head -5 >> refactoring_report.txt || echo "Coverage data not available" >> refactoring_report.txt
        
        # Add complexity analysis
        echo -e "\nComplexity Analysis:" >> refactoring_report.txt
        cat complexity_analysis.txt >> refactoring_report.txt

    - name: Commit refactored code
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git add -A
          git commit -m "üîß Claude Refactoring: ${{ steps.analyze.outputs.refactor_type }}

Automated refactoring for Issue #${{ github.event.issue.number }}
Target files: ${{ steps.analyze.outputs.target_files }}

Changes:
- Refactoring type: ${{ steps.analyze.outputs.refactor_type }}
- Pre-refactor tests: ${{ steps.pre_tests.outputs.pre_tests_status }}
- Post-refactor tests: ${{ steps.post_tests.outputs.post_tests_status }}

üîß Generated with Claude Refactoring System" || echo "Commit failed or no changes"
          git push || echo "Push failed"
        fi

    - name: Post refactoring results
      uses: actions/github-script@v7
      env:
        REFACTOR_TYPE: ${{ steps.analyze.outputs.refactor_type }}
        PRE_TESTS: ${{ steps.pre_tests.outputs.pre_tests_status }}
        POST_TESTS: ${{ steps.post_tests.outputs.post_tests_status }}
        TARGET_FILES: ${{ steps.analyze.outputs.target_files }}
      with:
        script: |
          const fs = require('fs');
          const refactorType = process.env.REFACTOR_TYPE;
          const preTests = process.env.PRE_TESTS;
          const postTests = process.env.POST_TESTS;
          const targetFiles = process.env.TARGET_FILES;
          const issueNumber = context.issue.number;
          const currentTime = new Date().toISOString();
          
          // Read refactoring report
          let report = '';
          try {
            report = fs.readFileSync('refactoring_report.txt', 'utf8');
          } catch (e) {
            report = 'Refactoring report not available';
          }
          
          const refactorTypeDescriptions = {
            'remove_duplication': 'üîÑ ÈáçË§á„Ç≥„Éº„ÉâÂâäÈô§',
            'extract_method': 'üì¶ „É°„ÇΩ„ÉÉ„ÉâÊäΩÂá∫',
            'rename_variables': 'üìù Â§âÊï∞ÂêçÊîπÂñÑ',
            'add_documentation': 'üìö „Éâ„Ç≠„É•„É°„É≥„ÉàËøΩÂä†',
            'improve_error_handling': 'üõ°Ô∏è „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ',
            'optimize_performance': '‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ',
            'improve_readability': 'üìñ ÂèØË™≠ÊÄßÂêë‰∏ä',
            'general_cleanup': 'üßπ ÂÖ®Ëà¨ÁöÑ„Å™„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó'
          };
          
          const overallStatus = preTests === 'passed' && postTests === 'passed' ? '‚úÖ ÊàêÂäü' : 
                               postTests === 'failed' ? '‚ùå „ÉÜ„Çπ„ÉàÂ§±Êïó' : '‚ö†Ô∏è Ë¶ÅÁ¢∫Ë™ç';
          
          const comment = [
            '## üîß Claude Refactoring - ÂÆüË°åÂÆå‰∫Ü',
            '',
            `**Issue**: #${issueNumber}`,
            `**„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Á®ÆÂà•**: ${refactorTypeDescriptions[refactorType] || refactorType}`,
            `**ÂØæË±°„Éï„Ç°„Ç§„É´**: ${targetFiles}`,
            `**ÂÆüË°åÊôÇÂàª**: ${currentTime}`,
            `**Á∑èÂêàÁµêÊûú**: ${overallStatus}`,
            '',
            '### üìä ÂÆüË°åÁµêÊûú„Çµ„Éû„É™„Éº',
            `- **„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Ââç„ÉÜ„Çπ„Éà**: ${preTests === 'passed' ? '‚úÖ ÈÄöÈÅé' : '‚ùå Â§±Êïó'}`,
            `- **„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Âæå„ÉÜ„Çπ„Éà**: ${postTests === 'passed' ? '‚úÖ ÈÄöÈÅé' : '‚ùå Â§±Êïó'}`,
            `- **„Ç≥„Éº„ÉâÂ§âÊõ¥**: ${overallStatus.includes('ÊàêÂäü') ? '‚úÖ ÈÅ©Áî®Ê∏à„Åø' : '‚ö†Ô∏è Ë¶ÅÁ¢∫Ë™ç'}`,
            '',
            '### üìã Ë©≥Á¥∞„É¨„Éù„Éº„Éà',
            '```',
            report,
            '```',
            '',
            '### üéØ Ê¨°Âõû„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÊåáÁ§∫‰æã',
            '- `[REFACTOR] ÈáçË§á„Ç≥„Éº„Éâ„ÇíÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `[REFACTOR] Calculator „ÇØ„É©„Çπ„ÅÆÂèØË™≠ÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `[REFACTOR] „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíÂº∑Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `[REFACTOR] „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíÊúÄÈÅ©Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '- `@claude-refactor „Éâ„Ç≠„É•„É°„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ`',
            '',
            '### üí° Âà©Áî®ÂèØËÉΩ„Å™„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Á®ÆÂà•',
            '- üîÑ ÈáçË§á„Ç≥„Éº„ÉâÂâäÈô§ (DRYÂéüÂâá)',
            '- üì¶ „É°„ÇΩ„ÉÉ„ÉâÊäΩÂá∫ (Âçò‰∏ÄË≤¨‰ªªÂéüÂâá)',
            '- üìù Â§âÊï∞ÂêçÊîπÂñÑ (ÂëΩÂêçË¶èÂâá)',
            '- üìö „Éâ„Ç≠„É•„É°„É≥„ÉàËøΩÂä† (JSDoc)',
            '- üõ°Ô∏è „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ',
            '- ‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ',
            '- üìñ ÂèØË™≠ÊÄßÂêë‰∏ä',
            '',
            '---',
            '*üîß Claude Refactoring „Å´„Çà„ÇäËá™ÂãïÂÆüË°å„Åï„Çå„Åæ„Åó„Åü*'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Add refactoring labels
      uses: actions/github-script@v7
      with:
        script: |
          const preTests = '${{ steps.pre_tests.outputs.pre_tests_status }}';
          const postTests = '${{ steps.post_tests.outputs.post_tests_status }}';
          const refactorType = '${{ steps.analyze.outputs.refactor_type }}';
          
          let labels = ['refactored', refactorType];
          
          if (preTests === 'passed' && postTests === 'passed') {
            labels.push('refactor-success');
          } else if (postTests === 'failed') {
            labels.push('refactor-needs-fix');
          } else {
            labels.push('refactor-review-needed');
          }
          
          await github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: labels
          });