name: Claude Code Review

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  claude-code-review:
    name: "👁️ Claude Code Review"
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.title, '[REVIEW]') || 
      contains(github.event.issue.labels.*.name, 'code-review') ||
      contains(github.event.comment.body, '@claude-review') ||
      contains(github.event.pull_request.title, '[REVIEW]') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'レビュー'))
    permissions:
      contents: read
      issues: write
      pull-requests: write
      checks: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Determine review scope
      id: scope
      run: |
        echo "Determining review scope..."
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "review_type=pull_request" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          
          # Get changed files in PR
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
          
        elif [ "${{ github.event_name }}" = "issues" ] || [ "${{ github.event_name }}" = "issue_comment" ]; then
          echo "review_type=issue_based" >> $GITHUB_OUTPUT
          
          # Parse review target from issue/comment
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            REVIEW_TEXT="${{ github.event.comment.body }}"
          else
            REVIEW_TEXT="${{ github.event.issue.body }}"
          fi
          
          # Extract file paths mentioned in the review request
          echo "$REVIEW_TEXT" | grep -oE "(src/[a-zA-Z0-9_.-]+\.(js|ts|jsx|tsx)|tests/[a-zA-Z0-9_.-]+\.(js|ts|jsx|tsx))" > target_files.txt || echo "No specific files mentioned"
          
          # If no specific files, review all source files
          if [ ! -s target_files.txt ]; then
            find src tests -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" 2>/dev/null > target_files.txt || echo "src/**/*.js" > target_files.txt
          fi
          
          echo "Target files for review:"
          cat target_files.txt
        fi

    - name: Run comprehensive code analysis
      id: analysis
      run: |
        echo "🔍 Running comprehensive code analysis..."
        
        # Code quality checks
        echo "=== ESLint Analysis ===" > review_report.txt
        npm run lint >> review_report.txt 2>&1 || echo "ESLint completed with warnings/errors" >> review_report.txt
        
        echo -e "\n=== Test Coverage Analysis ===" >> review_report.txt
        npm run test:coverage >> review_report.txt 2>&1 || echo "Coverage analysis completed" >> review_report.txt
        
        echo -e "\n=== Security Scan ===" >> review_report.txt
        # Basic security checks
        echo "Checking for potential security issues..." >> review_report.txt
        
        # Check for console.log statements
        if find src -name "*.js" -exec grep -l "console\.log" {} \; 2>/dev/null | head -5; then
          echo "⚠️ Found console.log statements (should be removed in production):" >> review_report.txt
          find src -name "*.js" -exec grep -Hn "console\.log" {} \; 2>/dev/null | head -10 >> review_report.txt
        fi
        
        # Check for TODO/FIXME comments
        echo -e "\n=== TODO/FIXME Analysis ===" >> review_report.txt
        if find src tests -name "*.js" -exec grep -Hn "TODO\|FIXME\|XXX\|HACK" {} \; 2>/dev/null; then
          echo "Found TODO/FIXME comments:" >> review_report.txt
          find src tests -name "*.js" -exec grep -Hn "TODO\|FIXME\|XXX\|HACK" {} \; 2>/dev/null >> review_report.txt
        else
          echo "No TODO/FIXME comments found" >> review_report.txt
        fi
        
        # Complexity analysis
        echo -e "\n=== Code Complexity Analysis ===" >> review_report.txt
        echo "Analyzing function complexity..." >> review_report.txt
        
        # Count lines of code
        echo -e "\n=== Code Metrics ===" >> review_report.txt
        echo "Lines of code:" >> review_report.txt
        find src -name "*.js" -exec wc -l {} \; 2>/dev/null | awk '{sum+=$1} END {print "Total: " sum " lines"}' >> review_report.txt
        
        echo "Files analyzed:" >> review_report.txt
        find src -name "*.js" | wc -l >> review_report.txt

    - name: Generate code review insights
      id: insights
      run: |
        echo "📊 Generating code review insights..."
        
        # Analyze specific code patterns
        echo -e "\n=== Code Pattern Analysis ===" >> review_report.txt
        
        # Check for proper error handling
        echo "Error handling patterns:" >> review_report.txt
        ERROR_HANDLING=$(find src -name "*.js" -exec grep -c "try\|catch\|throw\|Error" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}')
        echo "Error handling statements found: ${ERROR_HANDLING:-0}" >> review_report.txt
        
        # Check for async/await usage
        ASYNC_COUNT=$(find src -name "*.js" -exec grep -c "async\|await" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}')
        echo "Async/await usage: ${ASYNC_COUNT:-0}" >> review_report.txt
        
        # Check test coverage percentage
        COVERAGE_PERCENT=$(npm run test:coverage 2>/dev/null | grep -oE "[0-9]+(\.[0-9]+)?%" | tail -1 || echo "Unknown")
        echo "Test coverage: ${COVERAGE_PERCENT}" >> review_report.txt
        
        # Function analysis
        echo -e "\n=== Function Analysis ===" >> review_report.txt
        FUNCTION_COUNT=$(find src -name "*.js" -exec grep -c "function\|=>" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}')
        echo "Total functions: ${FUNCTION_COUNT:-0}" >> review_report.txt
        
        # Class analysis
        CLASS_COUNT=$(find src -name "*.js" -exec grep -c "class\|export class" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}')
        echo "Total classes: ${CLASS_COUNT:-0}" >> review_report.txt

    - name: Generate specific recommendations
      id: recommendations
      run: |
        echo "💡 Generating specific recommendations..."
        
        echo -e "\n=== Code Review Recommendations ===" >> review_report.txt
        
        # Check for missing JSDoc
        echo "📚 Documentation Recommendations:" >> review_report.txt
        UNDOCUMENTED_FUNCTIONS=$(find src -name "*.js" -exec grep -L "\/\*\*" {} \; 2>/dev/null | wc -l)
        if [ "$UNDOCUMENTED_FUNCTIONS" -gt 0 ]; then
          echo "- Consider adding JSDoc comments to functions" >> review_report.txt
          echo "  Files without documentation: $UNDOCUMENTED_FUNCTIONS" >> review_report.txt
        fi
        
        # Check for consistent naming
        echo -e "\n🏷️ Naming Convention Recommendations:" >> review_report.txt
        if find src -name "*.js" -exec grep -E "var [a-z]|let [a-z]|const [a-z]" {} \; 2>/dev/null | grep -qE "[A-Z]"; then
          echo "- Consider using camelCase for variable names consistently" >> review_report.txt
        fi
        
        # Performance recommendations
        echo -e "\n⚡ Performance Recommendations:" >> review_report.txt
        if find src -name "*.js" -exec grep -l "for.*in\|for.*of" {} \; 2>/dev/null | head -1 >/dev/null; then
          echo "- Review loop usage for performance optimization opportunities" >> review_report.txt
        fi
        
        # Security recommendations
        echo -e "\n🔒 Security Recommendations:" >> review_report.txt
        if find src -name "*.js" -exec grep -l "eval\|innerHTML\|document.write" {} \; 2>/dev/null | head -1 >/dev/null; then
          echo "- ⚠️ Found potentially unsafe operations (eval, innerHTML, document.write)" >> review_report.txt
        fi
        
        # Testing recommendations
        echo -e "\n🧪 Testing Recommendations:" >> review_report.txt
        TEST_FILES=$(find tests -name "*.js" 2>/dev/null | wc -l)
        SRC_FILES=$(find src -name "*.js" 2>/dev/null | wc -l)
        if [ "$TEST_FILES" -lt "$SRC_FILES" ]; then
          echo "- Consider adding more test files (Currently: $TEST_FILES tests for $SRC_FILES source files)" >> review_report.txt
        fi
        
        echo -e "\n✅ Review completed at $(date)" >> review_report.txt

    - name: Post review results
      uses: actions/github-script@v7
      env:
        REVIEW_REPORT: ${{ hashFiles('review_report.txt') }}
      with:
        script: |
          const fs = require('fs');
          const reviewReport = fs.readFileSync('review_report.txt', 'utf8');
          const currentTime = new Date().toISOString();
          const eventType = context.eventName;
          
          // Determine target (PR or Issue)
          let targetNumber, targetType;
          if (context.payload.pull_request) {
            targetNumber = context.payload.pull_request.number;
            targetType = 'Pull Request';
          } else {
            targetNumber = context.payload.issue.number;
            targetType = 'Issue';
          }
          
          // Generate review summary
          const lines = reviewReport.split('\n');
          const errorCount = (reviewReport.match(/error/gi) || []).length;
          const warningCount = (reviewReport.match(/warning/gi) || []).length;
          const todoCount = (reviewReport.match(/TODO|FIXME/gi) || []).length;
          
          let reviewStatus = '✅ 良好';
          if (errorCount > 5) reviewStatus = '❌ 要改善';
          else if (warningCount > 10 || todoCount > 5) reviewStatus = '⚠️ 改善推奨';
          
          const comment = [
            '## 👁️ Claude Code Review - 完了',
            '',
            `**${targetType}**: #${targetNumber}`,
            `**レビュー実行時刻**: ${currentTime}`,
            `**総合評価**: ${reviewStatus}`,
            '',
            '### 📊 分析サマリー',
            `- エラー: ${errorCount}件`,
            `- 警告: ${warningCount}件`, 
            `- TODO/FIXME: ${todoCount}件`,
            '',
            '### 📋 詳細レビュー結果',
            '```',
            reviewReport,
            '```',
            '',
            '### 🎯 推奨アクション',
            '1. **高優先度**: エラーの修正',
            '2. **中優先度**: 警告への対応',
            '3. **低優先度**: TODO項目の整理',
            '',
            '### 💡 次回レビュー指示例',
            '- `[REVIEW] src/calculator.js をレビューしてください`',
            '- `@claude-review セキュリティ観点でチェックしてください`',
            '- `[REVIEW] パフォーマンス改善点を教えてください`',
            '',
            '---',
            '*👁️ Claude Code Review により自動実行されました*'
          ].join('\n');

          if (context.payload.pull_request) {
            // Post to PR
            await github.rest.issues.createComment({
              issue_number: targetNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            // Post to Issue
            await github.rest.issues.createComment({
              issue_number: targetNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Add review labels
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reviewReport = fs.readFileSync('review_report.txt', 'utf8');
          
          const errorCount = (reviewReport.match(/error/gi) || []).length;
          const warningCount = (reviewReport.match(/warning/gi) || []).length;
          
          let labels = ['code-reviewed'];
          
          if (errorCount > 5) {
            labels.push('needs-improvement');
          } else if (warningCount > 10) {
            labels.push('minor-issues');
          } else {
            labels.push('review-passed');
          }
          
          const targetNumber = context.payload.pull_request?.number || context.payload.issue?.number;
          
          await github.rest.issues.addLabels({
            issue_number: targetNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: labels
          });